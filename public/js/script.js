// Generated by CoffeeScript 1.8.0
(function() {
  var Person, PersonView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Person = (function(_super) {
    __extends(Person, _super);

    function Person() {
      return Person.__super__.constructor.apply(this, arguments);
    }

    Person.prototype.defaults = {
      name: "Guest User",
      age: 23,
      occupation: "Worker"
    };

    Person.prototype.validate = function(attrs, options) {
      if (attrs.age < 0) {
        return 'Age must be positive.';
      }
      if (!attrs.name) {
        return 'Person must have a name';
      }
    };

    Person.prototype.work = function() {
      return console.log(this.get('name') + ' is working.');
    };

    return Person;

  })(Backbone.Model);

  PersonView = (function(_super) {
    __extends(PersonView, _super);

    function PersonView() {
      return PersonView.__super__.constructor.apply(this, arguments);
    }

    PersonView.prototype.tagName = 'li';

    PersonView.prototype.className = 'person';

    PersonView.prototype.id = 'people';

    PersonView.prototype.events = {
      'click': 'alertTest',
      'click .edit': 'editPerson',
      'click .delete': 'deletePerson'
    };

    PersonView.prototype.initialize = function() {
      return this.render();
    };

    PersonView.prototype.render = function() {
      return console.log("my name is " + this.get('name'));
    };

    return PersonView;

  })(Backbone.View);

  $(function() {
    var person, personView;
    person = new Person;
    person.work();
    return personView = new PersonView;
  });

}).call(this);
